/*
 * This file is generated by jOOQ.
 */
package ru.psu.taskforjob.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.psu.taskforjob.jooq.Indexes;
import ru.psu.taskforjob.jooq.Keys;
import ru.psu.taskforjob.jooq.Public;
import ru.psu.taskforjob.jooq.tables.records.EmployeeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employee extends TableImpl<EmployeeRecord> {

    private static final long serialVersionUID = 1661724164;

    /**
     * The reference instance of <code>public.Employee</code>
     */
    public static final Employee EMPLOYEE = new Employee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRecord> getRecordType() {
        return EmployeeRecord.class;
    }

    /**
     * The column <code>public.Employee.id</code>.
     */
    public final TableField<EmployeeRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.Employee.WorkerName</code>.
     */
    public final TableField<EmployeeRecord, String> WORKERNAME = createField(DSL.name("WorkerName"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.Employee.idOrg</code>.
     */
    public final TableField<EmployeeRecord, UUID> IDORG = createField(DSL.name("idOrg"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.Employee.idChief</code>.
     */
    public final TableField<EmployeeRecord, UUID> IDCHIEF = createField(DSL.name("idChief"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * Create a <code>public.Employee</code> table reference
     */
    public Employee() {
        this(DSL.name("Employee"), null);
    }

    /**
     * Create an aliased <code>public.Employee</code> table reference
     */
    public Employee(String alias) {
        this(DSL.name(alias), EMPLOYEE);
    }

    /**
     * Create an aliased <code>public.Employee</code> table reference
     */
    public Employee(Name alias) {
        this(alias, EMPLOYEE);
    }

    private Employee(Name alias, Table<EmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employee(Name alias, Table<EmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Employee(Table<O> child, ForeignKey<O, EmployeeRecord> key) {
        super(child, key, EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYEE_PKEY);
    }

    @Override
    public UniqueKey<EmployeeRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_PKEY;
    }

    @Override
    public List<UniqueKey<EmployeeRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeRecord>>asList(Keys.EMPLOYEE_PKEY);
    }

    @Override
    public List<ForeignKey<EmployeeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeeRecord, ?>>asList(Keys.EMPLOYEE__FK_ORG, Keys.EMPLOYEE__FK_CHIEF);
    }

    public Organization organization() {
        return new Organization(this, Keys.EMPLOYEE__FK_ORG);
    }

    public ru.psu.taskforjob.jooq.tables.Employee employee() {
        return new ru.psu.taskforjob.jooq.tables.Employee(this, Keys.EMPLOYEE__FK_CHIEF);
    }

    @Override
    public Employee as(String alias) {
        return new Employee(DSL.name(alias), this);
    }

    @Override
    public Employee as(Name alias) {
        return new Employee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(String name) {
        return new Employee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(Name name) {
        return new Employee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, UUID, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
